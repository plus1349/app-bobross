# Generated by Django 2.2.8 on 2019-12-23 16:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('paintings', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='phone')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email')),
                ('is_staff', models.BooleanField(default=False, verbose_name='is staff')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
                'ordering': ('is_superuser', 'id'),
            },
            managers=[
                ('objects', users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPainting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('painting', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_paintings', to='paintings.Painting', verbose_name='painting')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paintings', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user painting',
                'verbose_name_plural': 'user paintings',
                'db_table': 'user_paintings',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='UserPaintingLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('finish', models.BooleanField(default=False, verbose_name='finish')),
                ('painting_layer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_painting_layers', to='paintings.PaintingLayer', verbose_name='painting layer')),
                ('user_painting', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layers', to='users.UserPainting', verbose_name='user painting')),
            ],
            options={
                'verbose_name': 'user painting layer',
                'verbose_name_plural': 'user painting layers',
                'db_table': 'user_painting_layers',
                'ordering': ('id',),
            },
        ),
    ]
